/* 
CSS is used to define styles for your web pages, 
including the design,
layout and variations in display for different devices 
and screen sizes.

/* This is a comment */
body {
    background-color: lightblue; /* This is an inline comment */
  }
  
  /* Styling for the main heading */
  h1 {
    color: white;
    text-align: center;
  }
  
  /* Paragraph styling */
  p {
    font-family: verdana;
    font-size: 20px;
  }

  /*
CSS solved a big problem for HTML
-> HTML was NEVER intended to contain tags for formatting a webpage

- HTML describes the content of a web page,
When tags like <font>, and color attributes were added
to the HTML 3.2 specification, 
it started a nightmare for web developers. 

Development of large websites, 
where fonts and color information were added to every single page, 
became a long and expensive process.

To solve this problem, 
the World Wide Web Consortium (W3C) created CSS.
CSS removed the style formatting from the HTML page.
*/

/*CSS style definitions are normally saved in external .css files*/

/*With an external stylesheet file, you can change the look of an entire website by changing just one file!*/

/*
3 ways to add CSS to HTML

Inline:
Quick makeover directly in an HTML tag
body { background-color: powderblue; } h1 { color: blue; } p { color: red }

Internal: 
Dedicated section in HTML file for styles

External:
Seperate file completely dedicated to styles

CSS makes you website 
  - look good
  - improve readability and user experience
  - allow your website to work on multiple devices
*/






/*  ////////////////////////////////////////////////////////////////////    SYNTAX  /////////////////////////////////////////////////////   */
    /*Declaration    Declaration*/
h1 {color:blue; font-size:12px;}
/*selector property:value; property:value;*/

/*
The selector points to the HTML element you want to style.

The declaration block contains one or more declarations separated by semicolons.

Each declaration includes a CSS property name and a value, separated by a colon.

Multiple CSS declarations are separated with semicolons, and declaration blocks are surrounded by curly braces.*/

/*In this example all <p> elements will be center-aligned, with a red text color:*/

p {
  color: red;
  text-align: center;
}

/* p is the selector that points to the HTML element you want to style
<p>

color is a propery, red is the property value

text-align is a propery, center is the property value*/




/*  ////////////////////////////////////////////////////////////////////    CSS SELECTORS    /////////////////////////////////////////////////////   */

/*CSS selectors are used to "find" (or select) the HTML elements you want to style

We can dicide CSS selectors into 5 catagories:

    Simple selectors (select elements based on name, id, class)

    Combinator selectors (select elements based on a specific relationship between them)
    
    Pseudo-class selectors (select elements based on a certain state)
    
    Pseudo-elements selectors (select and style a part of an element)
    
    Attribute selectors (select elements based on an attribute or attribute value)


CSS ELEMENT SELECTOR
selects HTML elements based on element name*/

p {
    text-align: center;
    color: red;
  }



/*CSS ID SELECTOR
uses the id attribute of an HTML element to select a specific element
The id of an element is unique within a page, so the id selector is used to select one unique element!
To select an element with a specific id, write a hash (#) character, followed by the id of the element.

The CSS rule below will be applied to the HTML element with id="para1": */

#para1 {
  text-align: center;
  color: red;
}

/* An id name CANNOT start with a number 


CSS CLASS SELECTOR
selects HTML elements with a specific class attribute.
To select elements with a specific class, write a period (.) character, followed by the class name.

Example
In this example all HTML elements with class="center" will be red and center-aligned: */

.center {
    text-align: center;
    color: red;
}

/*You can also specify that only specific HTML elements should be affected by a class.

Example
In this example only <p> elements with class="center" will be red and center-aligned: */

p.center {
    text-align: center;
    color: red;
  }

/*HTML elements can also refer to more than one class.

Example
In this example the <p> element will be styled according to class="center" and to class="large":

<p class="center large">This paragraph refers to two classes.</p>

A class name cannot start with a number



CSS UNIVERSAL SELECTOR
The universal selector (*) selects all HTML elements on the page.

Example
The CSS rule below will affect every HTML element on the page: */

* {
  text-align: center;
  color: blue;
}

/* CSS GROUPING SELECTOR

grouping selector selects all the HTML elements with the same style definitions.

Look at the following CSS code (the h1, h2, and p elements have the same style definitions):*/

h1 {
  text-align: center;
  color: red;
}

h2 {
  text-align: center;
  color: red;
}

p {
  text-align: center;
  color: red;
}

/*It will be better to group the selectors, to minimize the code.

To group selectors, separate each selector with a comma.

Example
In this example we have grouped the selectors from the code above: */

h1, h2, p {
  text-align: center;
  color: red;
}
/*

ALL CSS SIMPLE SELECTORS
#id	                #firstname	            Selects the element with id="firstname"

.class	            .intro	                Selects all elements with class="intro"

*	                  *	                      Selects all elements

element	            p	                      Selects all <p> elements

element,element,..	div, p	                Selects all <div> elements and all <p> elements


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


THREE WAYS TO INSERT CSS
There are three ways of inserting a style sheet:

  - External CSS
  - Internal CSS
  - Inline CSS


External CSS
With an external style sheet, 
you can change the look of an entire website 
by changing just one file!

Each HTML page must include 
a reference to the external style sheet 
file inside the <link> element, inside the head section.


Example
External styles are defined within the <link> element, 
inside the <head> section of an HTML page:*/

<!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" href="mystyle.css">
</head>
<body>

<h1>This is a heading</h1>
<p>This is a paragraph.</p>

</body>
</html>

/*
An external style sheet can be written in any text editor, and must be saved with a .css extension.

The external .css file should not contain any HTML tags.

Here is how the "mystyle.css" file looks:*/

body {
  background-color: lightblue;
}

h1 {
  color: navy;
  margin-left: 20px;
}

/*
Internal CSS

An internal style sheet may be used if 
one single HTML page has a unique style.

The internal style is defined 
inside the <style> element, inside the head section.

Example
Internal styles are defined within the <style> element, 
inside the <head> section of an HTML page*/

<!DOCTYPE html>
<html>
<head>
<style>
body {
  background-color: linen;
}

h1 {
  color: maroon;
  margin-left: 40px;
}
</style>
</head>
<body>

<h1>This is a heading</h1>
<p>This is a paragraph.</p>

</body>
</html>

/*
Inline CSS
An inline style may be used to apply a unique style 
for a single element.

To use inline styles, add the style attribute to the 
relevant element. 
The style attribute can contain any CSS property.

EX.
inline styles are defined within the "style" attribute of the relevant element
*/

<!DOCTYPE html>
<html>
<body>

<h1 style="color:blue;text-align:center;">This is a heading</h1>
<p style="color:red;">This is a paragraph.</p>

</body>
</html>

/*
Multiple Style Sheets
If some properties have been defined for the same selector (element) in different style sheets, 
the value from the last read style sheet will be used. 

Assume that an external style sheet has the following style for the <h1> element:*/

h1 {
  color: navy;
}

/*
Then, assume that an internal style sheet also has the following style for the <h1> element:*/

h1 {
  color: orange;   
}

/*
Ex
If the internal style is defined AFTER
the link to the external style sheet, 
the <h1> elements will be "orange":*/

<head>
<link rel="stylesheet" type="text/css" href="mystyle.css">
<style>
h1 {
  color: orange;
}
</style>
</head>

/*
HOWEVER
if the internal style is defined BEFORE
the link to the external style sheet, 
the <h1> elements will be "navy": */

<head>
<style>
h1 {
  color: orange;
}
</style>
<link rel="stylesheet" type="text/css" href="mystyle.css">
</head>

/*
CASCADING ORDER
What style will be used when there is more than one style specified for an HTML element?

All the styles in a page will "cascade" into a new 
"virtual" style sheet by the following rules, where number one has the highest priority:

  1. Inline style (inside an HTML element)
  2. External and internal style sheets (in the head section)
  3. Browser default

So, an inline style has the highest priority, 
and will override external and internal styles and browser defaults.



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


CSS COMMENTS

Comments are ignored by browsers.

A CSS comment is placed inside the <style> element, 
and starts with /* and ends with */

/*
HTML and CSS Comments

From the HTML tutorial, 
you learned that you can add comments to your 
HTML source by using the <!--...--> syntax.

In the following example, 
we use a combination of HTML and CSS comments:*/

<!DOCTYPE html>
<html>
<head>
<style>
p {
  color: red; /* Set text color to red */
}
</style>
</head>
<body>

<h2>My Heading</h2>

<!-- These paragraphs will be red -->
<p>Hello World!</p>
<p>This paragraph is styled with CSS.</p>
<p>HTML and CSS comments are not shown in the output.</p>

</body>
</html>

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CSS COLORS
Colors are specified using predefined color names, or RGB, HEX, HSL, RGBA, HSLA values.

In CSS, a color can be specified by using a predefined color name:

EX.
Tomato
Orange
DodgerBlue
MediumSeaGreen
Gray
SlateBlue
Violet
LightGray

CSS/HTML support 140 standard color names.


CSS Background Color
set the background color for HTML elements: */

<h1 style="background-color:DodgerBlue;">Hello World</h1>

<p style="background-color:Tomato;"> Hiiiiiiiii... </p>

/* 
CSS Text Color
You can set the color of text:*/

<h1 style="color:Tomato;">Hello World</h1>
<p style="color:DodgerBlue;">Lorem ipsum... </p>
<p style="color:MediumSeaGreen;">Ut wisi enim... </p>


/*
CSS Border Color
You can set the color of borders:*/

<h1 style="border:2px solid Tomato;">Hello World</h1>
<h1 style="border:2px solid DodgerBlue;">Hello World</h1>
<h1 style="border:2px solid Violet;">Hello World</h1>

/*
CSS Color Values

In CSS, colors can also be specified using RGB values, HEX values, HSL values, RGBA values, and HSLA values:

Same as color name "Tomato":

rgb(255, 99, 71)
#ff6347
hsl(9, 100%, 64%)

Same as color name "Tomato", but 50% transparent:

rgba(255, 99, 71, 0.5)
hsla(9, 100%, 64%, 0.5)

EX.*/

<h1 style="background-color:rgb(255, 99, 71);">... </h1>
<h1 style="background-color:#ff6357;">... </h1>
<h1 style="background-color:hsl(9, 100%, 64%);">... </h1>

<h1 style="background-color:rgba(255, 99, 71, 0.5);">... </h1>
<h1 style="background-color:hsla(9, 100%, 64%, 0.5);">... </h1>


/*
CSS RGB COLORS:
An RGB color value represents RED, GREEN, and BLUE light sources.

rgb(red, green, blue)

Each parameter (red, green, and blue) defines the intensity of the color between 0 and 255.

For example, rgb(255, 0, 0) is displayed as red, because red is set to its highest value (255) and the others are set to 0.

To display black, set all color parameters to 0, like this: rgb(0, 0, 0).

To display white, set all color parameters to 255, like this: rgb(255, 255, 255).

Shades of gray are often defined using equal values for all the 3 light sources:
rgb(60, 60, 60)
rgb(90, 90, 90)
rgb(120, 120, 120)
rgb(180, 180, 180)
rgb(210, 210, 210)
rgb(240, 240, 240)


RGBA Value
RGBA color values are an extension of RGB color values with an alpha channel - which specifies the opacity for a color.

An RGBA color value is specified with:

rgba(red, green, blue, alpha)

The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent at all):


CSS HEX COLORS:
A hexadecimal color is specified with: #RRGGBB, where the RR (red), GG (green) and BB (blue) hexadecimal integers specify the components of the color.

HEX Value
In CSS, a color can be specified using a hexadecimal value in the form:

#rrggbb

Where rr (red), gg (green) and bb (blue) are hexadecimal values between 00 and ff (same as decimal 0-255).

For example, #ff0000 is displayed as red, because red is set to its highest value (ff) and the others are set to the lowest value (00).

To display black, set all values to 00, like this: #000000.

To display white, set all values to ff, like this: #ffffff.  

Shades of gray are often defined using equal values for all the 3 light sources:

Ex:
#3c3c3c
#616161
#787878
#b4b4b4
#f0f0f0
#f9f9f9


3 DIGIT HEX VALUE:
Sometimes you will see a 3-digit hex code in the CSS source.

The 3-digit hex code is a shorthand for some 6-digit hex codes.

The 3-digit hex code has the following form:

#rgb

Where r, g, and b represent the red, green, and blue components with values between 0 and f.

The 3-digit hex code can only be used when both the values (RR, GG, and BB) 
are the same for each component. 
So, if we have #ff00cc, it can be written like this: #f0c.

EX.*/

body {
  background-color: #fc9; /* same as #ffcc99 */
}

h1 {
  color: #f0f; /* same as #ff00ff */
}

p {
  color: #b58; /* same as #bb5588 */
}


/*
CSS HSL COLORS:
HSL stands for hue, saturation, and lightness.


HSL Value
In CSS, a color can be specified using hue, saturation, and lightness (HSL) in the form:

hsl(hue, saturation, lightness)

Hue is a degree on the color wheel from 0 to 360. 0 is red, 120 is green, and 240 is blue.

Saturation is a percentage value. 0% means a shade of gray, and 100% is the full color.

Lightness is also a percentage. 0% is black, 50% is neither light or dark, 100% is white


SATURATION:
Saturation can be described as the intensity of a color.

100% is pure color, no shades of gray.

50% is 50% gray, but you can still see the color.

0% is completely gray; you can no longer see the color.


LIGHTNESS:
The lightness of a color can be described as how much light you want to give the color, where 0% means no light (black), 
50% means 50% light (neither dark nor light) and 100% means full lightness (white).


Shades of Gray are often defined by 
setting the hue and saturation to 0, and adjust the lightness from 0% to 100% to get darker/lighter shades:

Ex:
hsl(0, 0%, 0%)
hsl(0, 0%, 24%)
hsl(0, 0%, 47%)
hsl(0, 0%, 71%)
hsl(0, 0%, 94%)
hsl(0, 0%, 100%)


HSLA Value:
HSLA color values are an extension of HSL color values with an alpha channel - which specifies the opacity for a color.

An HSLA color value is specified with:

hsla(hue, saturation, lightness, alpha)

The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent at all):

hsla(9, 100%, 64%, 0)
hsla(9, 100%, 64%, 0.2)
hsla(9, 100%, 64%, 0.4)
hsla(9, 100%, 64%, 0.6)
hsla(9, 100%, 64%, 0.8)
hsla(9, 100%, 64%, 1)


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


CSS Backgrounds
The CSS background properties are used to add background effects for elements.

following CSS background properties:

background-color
background-image
background-repeat
background-attachment
background-position
background (shorthand property)

CSS BACKGROUND COLOR
The background-color property specifies the background color of an element.

EX: */

body {
  background-color: lightblue;
}

/*With CSS, a color is most often specified by:

a valid color name - like "red"
a HEX value - like "#ff0000"
an RGB value - like "rgb(255,0,0)"


OTHER ELEMENTS
ex:*/

h1 {
  background-color: green;
}

div {
  background-color: lightblue;
}

p {
  background-color: yellow;
}


/*OPACITY / TRANSPARENCY

The opacity property specifies the opacity/transparency of an element. 
It can take a value from 0.0 - 1.0. The lower value, the more transparent:

EX: */

div {
  background-color: green;
  opacity: 0.3;
}


/* TRANSPARENCY USING RGBA

If you do not want to apply opacity to child elements, like in our example above, use RGBA color values. The following example sets the opacity for the background color and not the text:

100% opacity

60% opacity

30% opacity

10% opacity

EX:*/

div {
  background: rgba(0, 128, 0, 0.3) /* Green background with 30% opacity */
}


/*
CSS background-image
The background-image property specifies an image to use as the background of an element.

By default, the image is repeated so it covers the entire element.

EX: background image for page*/

body {
  background-image: url("paper.gif");
}

/* ex-> bad comnination!!1! */

body {
  background-image: url("bgdesert.jpg"); /* black text on textured bkground (hearbreak emoji) */
}

/* The background image can also be set for specific elements, like the <p> element: */

p {
  background-image: url("paper.gif"); /* only background present for the paragraph */
}

/*
CSS Background Image Repeat
By default, the background-image property repeats an image both horizontally and vertically.

EX*/

body {
  background-image: url("gradient_bg.png");
}

/* However-> If the image above is repeated only horizontally (background-repeat: repeat-x;), the background will look better: */

body {
  background-image: url("gradient_bg.png");
  background-repeat: repeat-x;
}

/*To repeat an image vertically, set background-repeat: repeat-y;


CSS background-repeat: no-repeat
Showing the background image only once is also specified by the background-repeat property:

EX*: show background only once*/

body {
  background-image: url("img_tree.png");
  background-repeat: no-repeat;
}

/*
CSS background-position
The background-position property 
is used to specify the position of the background image.

EX: Position the background image in the top-right corner:  */

body {
  background-image: url("img_tree.png");
  background-repeat: no-repeat;
  background-position: right top;
  margin-right: 200px;
}


/* 
CSS background-attachment
The background-attachment property specifies whether the background image should scroll or be fixed (will not scroll with the rest of the page):

EX: Specify that the background image should be fixed: */

body {
  background-image: url("img_tree.png");
  background-repeat: no-repeat;
  background-position: right top;
  background-attachment: fixed;
}

/*Example
Specify that the background image should scroll with the rest of the page:*/

body {
  background-image: url("img_tree.png");
  background-repeat: no-repeat;
  background-position: right top;
  margin-right: 200px;
  background-attachment: scroll;
}


/*
CSS Background Shorthand
